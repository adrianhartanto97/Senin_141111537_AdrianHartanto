<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj0yLjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAADa
        CQAAAk1TRnQBSQFMAgEBAgEAAQgBAAEIAQABEAEAARABAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABEAMAAQEBAAEYBgABDBgAA/8GAAFLAVYBuQFMAVcBvwFMAVcBvgFMAVcBvwFMAVcBvwFLAVYBuQFM
        AVcBvwP/BgAD/QYAA/8GAAFXAcABnQFYAcYBoQFYAcUBoAFYAcYBoQFKAaUBigFKAaABhwFKAaUBigP/
        BgAD/WMAA/0DAAFYAWgB3AFYAWgB3QHiAd8BfwFLAVYBuAFMAVcBvwFMAVcBvgFMAVcBvwFMAVcBvwFL
        AVYBuAFMAVcBvwFPAVoBvQkAA/0DAAFYAcUBoAFYAcYBoQFYAcYBoQFXAb4BmwFYAcYBoQFKAaQBiQFK
        AaUBigFKAaUBigFJAZ8BhgFKAaUBigFKAaQBiWwAAVcBZgHUAVgBaAHdAVgBaAHcAXUBYwE+AUwBVwG/
        AUsBVgG4AUwBVwG/AUwBVwG+AUwBVwG/AUwBVwG/AUsBVgG4AUwBVwG/AUwBVwG+CQABVwG+AZsBWAHG
        AaEBWAHFAaABWAHGAaEBWAHGAaEBSQGfAYYBSgGlAYoBSgGkAYkBSgGlAYoBSgGlAYoBSQGfAYYBSgGl
        AYoBSgGkAYlpAAFYAWgB3QFXAWYB1AFYAWgB3QFYAWgB3AFMAVcBvwFMAVcBvwFLAVYBuAFMAVcBvwFM
        AVcBvgbtAUsBVgG4AUwBVwG/A/8DAAH1AfgB9wFYAcYBoQFXAb4BmwFYAcYBoQFYAcUBoAHPAdsB1wPd
        A9QD3QFXAakBkAFKAaUBigFKAaUBigFJAZ8BhgFKAaUBigP/YwABWAFoAdwBWAFoAd0BWAFoAd0BVwFm
        AdQBWAFoAd0BdQFjAT4BTAFXAb8BTAFXAb8BSwFWAbgB1QLiAdQC4QFyAX4ByQFMAVcBvwFLAVYBuAFM
        AVcBvwMAAVgBxQGgAVgBxgGhAVgBxgGhAVcBvgGbAxoD3AbdARwCHQPdA9wBSgGlAYoBSgGlAYoBSQGf
        AYYBSgGlAYpjAAFYAWgB3QFYAWgB3AFYAWgB3QFYAWgB3QFXAWYB1AFZAWgB2AFwAWQBXAFMAVcBvwHV
        AuIBzALZAaIBrwHVAW4BegHHAUwBVwG/AUwBVwG/AUsBVgG5AwABWAHGAaEBWAHFAaABWAHGAaEDWAEc
        Ah0D8gPcA9MDGgEcAh0D3QFPAaUBiwFKAaUBigFKAaUBigFKAaABh2MAAVcBZgHWAVgBaAHdAVgBaAHc
        AVgBaAHdAVgBaAHdAXIBYQE+AWIBcQHWAdQB3wHXAYIBdQFVAdEB3gHhAcwC2QFrAXYBxwFMAVcBvgFM
        AVcBvwFMAVcBvwHWAeoB4wFXAcABnQFYAcYBoQFYAcUBoAG/Aa0BmgHAAa8BnAHnAugD8gHwAvEGGgPU
        A7cBSgGkAYkBSgGlAYoBSgGlAYpgAAHeAeAB8AFYAWgB3QFXAWYB1AFYAWgB3QFYAWgB3AFYAWgB3QG9
        AcABmAGWAZwBqQGAAYUBpwHUAuEB1QLiAdUC4gFkAW4BvQFMAVcBvwFMAVcBvgFPAVoBxAFXAcMBowFY
        AcYBoQFXAb4BmwFYAcYBoQHwAvEG8gHnAugBzQHBAbMB8ALxBt0D1AFKAaUBigFKAaQBiQFYAcYBoWAA
        A/4BWAFoAd0BWAFoAd0BVwFmAdQBWAFoAd0BYwFmAZ4BWQFpAdwBygHLAY8BswG1AZUCzQGNAYoBkgG6
        AVABWgG5AVYBYAG5AUsBVgG4AU8BWgHEAVgBaAHcAcAB4wHXAVgBxgGhAVgBxgGhAVcBvgGbA/IB8ALx
        BhoB5wLoA/IB8ALxAxoD3QFJAZ8BhgFYAcYBoQFYAcUBoGMAAVgBaAHcAVgBaAHdAVgBaAHdAVcBZgHU
        AVgBaAHdAVgBaAHcAbMBtgGfAVgBaAHdAXcBgQG9AWsBdwHPAUwBVwG+AUwBVwG/AU8BWgHEAVcBZgHU
        AVgBaAHdAwABWAHFAaABWAHGAaEBWAHGAaEBHAIdA/IGGgPyAecC6APJAxoBuQHTAcsBWAHGAaEBVwG+
        AZsBWAHGAaFjAAFYAWgB3QFYAWgB3AFYAWgB3QFYAWgB3QFXAWYB1AF6AYUBxgLSAYgBXwFtAdkBWAFo
        Ad0CwgGLAU4BWAG3AU8BWgHDAVgBaAHdAVgBaAHdAVcBZgHWAwABWAHGAaEBWAHFAaABWAHGAaEBWAHG
        AaEB5wLoA/IB8ALxBvIB5wLoA+kBWAHFAaABWAHGAaEBWAHGAaEBVwHAAZ1jAAHqAesB8gFYAWgB3QFY
        AWgB3AFYAWgB3QFYAWgB3QFyAWEBPgHSAdABiwGHAZABvAGqAa4BpQGrAa8BpQFOAVkBvAFYAWgB3QFY
        AWgB3AFYAWgB3QP+AwABmQHSAb8BWAHGAaEBWAHFAaABWAHGAaEBWAHGAaEB5wLoAd0B1gHOAfAC8QPy
        Ae8C8QFXAb4BmwFYAcYBoQFYAcUBoAFYAcYBoWkAAVcBZgHUAVgBaAHdAVgBaAHcAVgBaAHdAVgBaAHd
        AXIBYQE+AVgBaAHcAZwBowGrAXEBYwFLAVgBaAHdAVcBZgHUAVgBaAHdAVgBaAHcCQABVwG+AZsBWAHG
        AaEBWAHFAaABWAHGAaEBWAHGAaEBVwG+AZsBWAHGAaEBWAHFAaABWAHGAaEBWAHGAaEBVwG+AZsBWAHG
        AaEBWAHFAaBsAAFXAWYB1AFYAWgB3QFYAWgB3AFYAWgB3QFYAWgB3QFXAWYB1AFYAWgB3QFYAWgB3AFY
        AWgB3QFYAWgB3QFXAWYB1AMAA/8JAAFXAb4BmwFYAcYBoQFYAcUBoAFYAcYBoQFYAcYBoQFXAb4BmwFY
        AcYBoQFYAcUBoAFYAcYBoQFYAcYBoQFXAb4BmwMAA/9jAAP/BgABzAHQAekBWAFoAd0BWAFoAdwBWAFo
        Ad0BWAFoAd0BVwFmAdYBWAFoAd0BWAFoAdwB8AHxAfYDAAP9BgAD/wYAAZkB0gG/AVgBxgGhAVgBxQGg
        AVgBxgGhAVgBxgGhAVcBwAGdAVgBxgGhAVgBxQGgAfUB+AH3AwAD/XgAAc0B0QHsAVcBZwHaAdcB2gHu
        JwABwAHjAdcBVwHDAaMB1gHqAeNyAAFCAU0BPgcAAT4DAAEoAwABQAMAARADAAEBAQABAQUAAYAXAAP/
        AQAB2AEGAdgBBgQAAaABAwGgAQMEAAHAAQEBwAEBBAABwAEAAYAFAAGAAQABgAUAAYABAAGABQABgBcA
        AYABAAGABQABgAEAAYAFAAGAAQABgAEBBAABwAEBAcABAQQAAeABAgHgAQIEAAGwAQUBsAEFBAAB/gE/
        Af4BPwQACw==
</value>
  </data>
</root>